import { explode, split, part1, part2, add } from "../src/days/day18";
import { asInput } from "../src/input";

describe("explode", () => {
  test("ex 1", () =>
    expect(explode([[[[[9, 8], 1], 2], 3], 4])).toEqual([[[[0, 9], 2], 3], 4]));

  test("ex 2", () =>
    expect(explode([7, [6, [5, [4, [3, 2]]]]])).toEqual([7, [6, [5, [7, 0]]]]));

  test("ex 3", () =>
    expect(explode([[6, [5, [4, [3, 2]]]], 1])).toEqual([[6, [5, [7, 0]]], 3]));

  test("ex 4", () =>
    expect(
      explode([
        [3, [2, [1, [7, 3]]]],
        [6, [5, [4, [3, 2]]]],
      ])
    ).toEqual([
      [3, [2, [8, 0]]],
      [9, [5, [4, [3, 2]]]],
    ]));

  test("ex 5", () =>
    expect(
      explode([
        [3, [2, [8, 0]]],
        [9, [5, [4, [3, 2]]]],
      ])
    ).toEqual([
      [3, [2, [8, 0]]],
      [9, [5, [7, 0]]],
    ]));
});

describe("split", () => {
  test("ex 1", () =>
    expect(
      split([
        [
          [[0, 7], 4],
          [15, [0, 13]],
        ],
        [1, 1],
      ])
    ).toEqual([
      [
        [[0, 7], 4],
        [
          [7, 8],
          [0, 13],
        ],
      ],
      [1, 1],
    ]));

  test("ex 2", () =>
    expect(
      split([
        [
          [[0, 7], 4],
          [
            [7, 8],
            [0, 13],
          ],
        ],
        [1, 1],
      ])
    ).toEqual([
      [
        [[0, 7], 4],
        [
          [7, 8],
          [0, [6, 7]],
        ],
      ],
      [1, 1],
    ]));
});

describe("add", () => {
  test("ex 1", () =>
    expect(
      add(
        [
          [[[4, 3], 4], 4],
          [7, [[8, 4], 9]],
        ],
        [1, 1]
      )
    ).toEqual([
      [
        [[0, 7], 4],
        [
          [7, 8],
          [6, 0],
        ],
      ],
      [8, 1],
    ]));

  test("ex 2", () =>
    expect(
      add(
        JSON.parse(
          "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"
        ),
        JSON.parse("[7,[5,[[3,8],[1,4]]]]")
      )
    ).toEqual(
      JSON.parse(
        "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]"
      )
    ));

  test("ex 3", () =>
    expect(
      add(
        JSON.parse("[[[[4, 3], 4], 4], [7, [[8, 4], 9]]]"),
        JSON.parse("[1, 1]")
      )
    ).toEqual(JSON.parse("[[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]]")));

  test("ex 4", () =>
    expect(
      add(
        JSON.parse("[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]"),
        JSON.parse("[1,[[[9,3],9],[[9,0],[0,7]]]]")
      )
    ).toEqual(
      JSON.parse(
        "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]"
      )
    ));

  test("ex 5", () =>
    expect(
      add(
        JSON.parse(
          "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]"
        ),
        JSON.parse("[[[5,[7,4]],7],1]")
      )
    ).toEqual(JSON.parse("[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]")));

  test("ex 6", () =>
    expect(
      add(
        JSON.parse("[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]"),
        JSON.parse("[[[[4,2],2],6],[8,7]]")
      )
    ).toEqual(
      JSON.parse("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")
    ));
});

describe("part 1", () => {
  test("ex 1", () =>
    expect(
      part1(
        asInput(
          `
[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
   `.trim()
        )
      )
    ).toBe(4140));

  test("ex 2", () =>
    expect(
      part1(
        asInput(
          `
[1,1]
[2,2]
[3,3]
[4,4]
   `.trim()
        )
      )
    ).toBe(445));

  test("ex 3", () =>
    expect(
      part1(
        asInput(
          `
[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
   `.trim()
        )
      )
    ).toBe(791));

  test("ex 4", () =>
    expect(
      part1(
        asInput(
          `
[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
[6,6]
   `.trim()
        )
      )
    ).toBe(1137));
});

test("part 2", () =>
  expect(
    part2(
      asInput(
        `
[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
`.trim()
      )
    )
  ).toBe(3993));
