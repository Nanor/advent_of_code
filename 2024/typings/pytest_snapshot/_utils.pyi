"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any

SIMPLE_VERSION_REGEX = ...
ILLEGAL_FILENAME_CHARS = ...

def shorten_path(path: Path) -> Path:
    """
    Returns the path relative to the current working directory if possible. Otherwise return the path unchanged.
    """
    ...

def get_valid_filename(s: str) -> str:
    """
    Return the given string converted to a string that can be used for a clean filename.
    Taken from https://github.com/django/django/blob/master/django/utils/text.py
    """
    ...

def might_be_valid_filename(s: str) -> bool:
    """
    Returns false if the given string is definitely a path traversal or not a valid filename.
    Returns true if the string might be a valid filename.

    Note: This isn't secure, it just catches most accidental path traversals or invalid filenames.
    """
    ...

def simple_version_parse(version: str) -> tuple[int, ...]:
    """
    Returns a 3 tuple of the versions major, minor, and patch.
    Raises a value error if the version string is unsupported.
    """
    ...

def flatten_dict(d: dict[Any, Any]) -> list[Any]:
    """
    Returns the flattened dict representation of the given dict.

    Example:

        >>> flatten_dict({
        ...     'a': 1,
        ...     'b': {
        ...         'c': 2
        ...     },
        ...     'd': {},
        ... })
        [(['a'], 1), (['b', 'c'], 2)]
    """
    ...

def flatten_filesystem_dict(d: dict[Any, Any]) -> dict[Any, Any]:
    """
    Returns the flattened dict of a nested dictionary structure describing a filesystem.

    Raises ``ValueError`` if any of the dictionary keys are invalid filenames.

    Example:

        >>> flatten_filesystem_dict({
        ...     'file1.txt': '111',
        ...     'dir1': {
        ...         'file2.txt': '222'
        ...     },
        ... })
        {'file1.txt': '111', 'dir1/file2.txt': '222'}
    """
    ...
