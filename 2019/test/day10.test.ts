import { part1, vaporised } from "../src/day10";
import { asInput } from "../src/input";

describe("day10", () => {
  test("example 1", () => {
    const str = ".#..#\n.....\n#####\n....#\n...##";

    expect(part1(asInput(str))).toBe(8);
  });

  test("example 2", () => {
    const str =
      "......#.#.\n#..#.#....\n..#######.\n.#.#.###..\n.#..#.....\n..#....#.#\n#..#....#.\n.##.#..###\n##...#..#.\n.#....####";

    expect(part1(asInput(str))).toBe(33);
  });

  test("example 3", () => {
    const str =
      "#.#...#.#.\n.###....#.\n.#....#...\n##.#.#.#.#\n....#.#.#.\n.##..###.#\n..#...##..\n..##....##\n......#...\n.####.###.";

    expect(part1(asInput(str))).toBe(35);
  });

  test("example 4", () => {
    const str =
      ".#..#..###\n####.###.#\n....###.#.\n..###.##.#\n##.##.#.#.\n....###..#\n..#.#..#.#\n#..#.#.###\n.##...##.#\n.....#.#..";

    expect(part1(asInput(str))).toBe(41);
  });

  test("example 5", () => {
    const str =
      ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##";

    expect(part1(asInput(str))).toBe(210);
  });

  test("example 6", () => {
    const str =
      ".#..##.###...#######\n##.############..##.\n.#.######.########.#\n.###.#######.####.#.\n#####.##.#.##.###.##\n..#####..#.#########\n####################\n#.####....###.#.#.##\n##.#################\n#####.##.###..####..\n..######..##.#######\n####.##.####...##..#\n.#####..#.######.###\n##...#.##########...\n#.##########.#######\n.####.#.###.###.#.##\n....##.##.###..#####\n.#.#.###########.###\n#.#.#.#####.####.###\n###.##.####.##.#..##";

    const order = vaporised(asInput(str));

    expect(order[1 - 1]).toBe(1112);
    expect(order[2 - 1]).toBe(1201);
    expect(order[3 - 1]).toBe(1202);
    expect(order[10 - 1]).toBe(1208);
    expect(order[20 - 1]).toBe(1600);
    expect(order[50 - 1]).toBe(1609);
    expect(order[100 - 1]).toBe(1016);
    expect(order[199 - 1]).toBe(906);
    expect(order[200 - 1]).toBe(802);
    expect(order[201 - 1]).toBe(1009);
    expect(order[299 - 1]).toBe(1101);
  });
});
